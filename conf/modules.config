/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "${params.publish_dir_mode}",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SRATOOLS_PREFETCH {
        publishDir = [
            path: { "${params.outdir}/sra" },
            enabled: false
        ]
    }
    withName: SRATOOLS_FASTERQDUMP {
        publishDir = [
            [
            path: { "${params.outdir}/fastq" },
            mode: 'copy',
            pattern: "*gz"
            ],
            [
            path: { "${params.outdir}/fastq/md5" },
            mode: 'copy',
            pattern: "*.md5"
            ]
        ]
    }
    withName: 'FASTQC_RAW' {
        ext.args         = '--quiet --dir .'
        ext.when         = {  }
        ext.prefix       = { "${meta.id}.raw" }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/fastqc_raw" },
            pattern: "*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'QC_REPORTSHEET' {
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/stats/qc_report" },
            pattern: "*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GATK4_HAPLOTYPECALLER' {
        memory           = { check_max( 12.GB * task.attempt, 'memory'  ) }
        ext.args         = "-ERC GVCF --sample-ploidy \"${params.sample_ploidy}\" "
        ext.prefix       = {"${meta.id}.g"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/variant_calling/haplotypecaller"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'GATK4_LOCALCOMBINEGVCFS' {
        ext.args              = ""
        ext.skip_samples      = params.skip_samples
        ext.skip_samples_file = params.skip_samples_file
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/gvcf"},
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

}


// Subworkflow: bwa-reference

process {

    withName: 'NUCMER' {
        ext.args         = { "--maxmatch --nosimplify" }
        // ext.when      = {   }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/masked" },
            pattern: "*.{coords}"
        ]
    }
     withName: 'COORDSTOBED' {
        // ext.args         = { "" }
        // ext.when         = {  }
        publishDir = [
            enabled: "${params.save_debug}",
            path: { "${params.outdir}/reference/masked" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.bed"
        ]
    }
    withName: 'BEDTOOLS_MASKFASTA' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir = [
            path: { "${params.outdir}/reference/masked" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.fa"       
        ]
    }
    withName: 'BWA_INDEX' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/bwa" },
            pattern: "bwa"
        ]
    }
    withName: 'SAMTOOLS_FAIDX' {
        ext.args         = { "" }
        ext.when         = { }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/fai" },
            pattern: "*fai"
        ]
    }

    withName: 'PICARD_CREATESEQUENCEDICTIONARY' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_reference}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/reference/dict" },
            pattern: "*.{dict}"
        ]
    }

}

// Subworkflow: bwa-pre-process

process {
    withName: 'SEQKIT_PAIR' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/seqkit_pair" },
            pattern: "*.fastq.gz"
        ]
    }
    withName: 'SEQTK_SAMPLE' {
        ext.args         = { "-s12237" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/seqkit_sample" },
            pattern: "*.fastq.gz"
        ]
    }
    withName: 'FAQCS' {
        ext.args         = { "--debug" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/faqcs" },
            pattern: "*.{fastq.gz,txt}"
        ]
    }
    withName: 'BWA_MEM' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/bwamem" },
            pattern: "*.bam"
        ]
    }
    
    withName: 'PICARD_MARKDUPLICATES' {
        ext.args         = { "REMOVE_DUPLICATES=true ASSUME_SORT_ORDER=coordinate VALIDATION_STRINGENCY=LENIENT" }
        //ext.args         = { "-REMOVE_DUPLICATES \"true\" -ASSUME_SORT_ORDER \"coordinate\" -VALIDATION_STRINGENCY \"LENIENT\" " }
        ext.prefix         = { "${meta.id}_markdups"}
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/picard_markduplicates" },
            pattern: "*.bam"
        ]
    }
    withName: 'PICARD_CLEANSAM' {
        //ext.args         = { "--VALIDATION_STRINGENCY LENIENT" }
        ext.when         = {  }
        ext.prefix         = { "${meta.id}_clean"}
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/picard_cleansam" },
            pattern: "*.bam"
        ]
    }
    withName: 'PICARD_FIXMATEINFORMATION' {
        ext.args         = { "" }
        ext.prefix         = { "${meta.id}_fixmate"}
        ext.stringency   = { "LENIENT" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/picard_fixmate" },
            pattern: "*.bam"
        ]
    }
    withName: 'PICARD_ADDORREPLACEREADGROUPS' {
        ext.args         = { "" }
        ext.prefix       = { "${meta.id}"}
        ext.sample       = { "${meta.id}" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/finalbam" },
            pattern: "*.bam"
        ]
    }

    withName: 'SAMTOOLS_VIEW' {
        ext.args         = { "-S -b" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/samtobam" },
            pattern: "*.sam"
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/finalbam" },
            pattern: "*.bai"
        ]
    }
    withName: 'FASTQC_POST' {
        ext.args         = '--quiet --dir .'
        ext.when         = {  }
        ext.prefix       = { "${meta.id}" }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/fastqc_post" },
            pattern: "*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'QUALIMAP_BAMQC' {
        ext.args         = { "" }
        ext.when         = {  }
        ext.prefix       = { "${meta.id}"}
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/stats/qualimap" },
            pattern: "*"
        ]
    }
    withName: 'SAMTOOLS_STATS' {
        ext.args         = { "" }
        ext.prefix       = { "${meta.id}"}
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/stats/samtools_stats" },
            pattern: "*.stats"
        ]
    }
    withName: 'SAMTOOLS_FLAGSTAT' {
        ext.args         = { "" }
        ext.when         = {  }
        ext.prefix       = { "${meta.id}"}
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/stats/samtools_flagstat" },
            pattern: "*.flagstat"
        ]
        
    }
    withName: 'SAMTOOLS_IDXSTATS' {
        ext.args         = { "" }
        ext.when         = {  }
        ext.prefix       = { "${meta.id}"}
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/stats/samtools_idxstats" },
            pattern: "*.idxstats"
        ]
    }
    withName: 'QC_REPORT' {
        ext.args         = { "" }
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_alignment}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/samples/${meta.id}/qc_report" },
            pattern: "*.{txt}"
        ]
    }
}

// Subworkflow: gatk-variants

process {
    withName: 'GATK4_GENOTYPEGVCFS' {
        ext.args         = { "" }
        ext.when         = {  }
        ext.prefix        = {"combined_genotype"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/genotypegvcfs" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'GATK4_VARIANTFILTRATION' {
        ext.args         = { "--filter-expression '${params.gvcfs_filter}' --filter-name filter" }
        ext.when         = {  }
        ext.prefix        = {"combined_genotype_filtered"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/filteredgvcfs" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'GATK4_SELECTVARIANTS' {
        ext.args         = { '--select-type-to-include "SNP"' }
        ext.when         = {  }
        ext.prefix        = {"combined_genotype_filtered_snps"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/selectedsnps" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'FILTER_GATK_GENOTYPES' {
        ext.args         = { params.gatkgenotypes_filter }
        ext.when         = {  }
        ext.prefix        = {"combined_genotype_filtered_snps_filtered"}
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/selectedsnpsfiltered" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'BCFTOOLS_VIEW_CONVERT' {
        ext.args         = { "-Oz" }
        ext.when         = {  }
        ext.prefix        = {"finalfiltered"}
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/finalfiltered" },
            pattern: "*{vcf.gz,vcf.gz.tbi}"
        ]
    }
    withName: 'BCFTOOLS_INDEX' {
        ext.args         = {  }
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/selectedsnpsfiltered" },
            pattern: "*{csi,tbi}"
        ]
    }
    withName: 'SPLIT_VCF' {
        ext.args         = { }
        ext.when         = {  }
        ext.prefix        = { }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/splitvcf" },
            pattern: "*{txt,vcf.gz}"
        ]
    }
     withName: 'VCF_TO_FASTA' {
        ext.when         = {  }
        publishDir       = [
            enabled: false,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/vcf-to-fasta" },
            pattern: "*{fasta}"
        ]
    }
     withName: 'VCF_QC' {
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/vcf-qc-report" },
            pattern: "*.{txt}"
        ]
    }
    withName: 'VCF_CONSENSUS' {
        ext.when         = {  }
        publishDir       = [
            enabled: "${params.save_debug}",
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/consensus" },
            pattern: "*{fasta.gz}"
        ]
    }
}

//Subworkflow: snpeff

if(params.snpeff == true){
    process {
        withName: 'SNPEFF' {
            ext.args   = { "-config ${params.snpeffconfig}" }
            publishDir = [
                path: { "${params.outdir}/snpeff" },
                mode: params.publish_dir_mode,
                pattern: "*.{csv,txt,html}"
            ]
        }
        withName: 'TABIX_BGZIPTABIX' {
            ext.prefix = { "${meta.id}.snpeff" }
            publishDir = [
                path: { "${params.outdir}/snpeff" },
                mode: params.publish_dir_mode,
                pattern: "*.{tbi,gz}"
            ]
        }
        withName: 'SNPEFFR' {
            ext.args   = { "-p ${params.positions} -g ${params.genes} -e ${params.exclude} " }
            publishDir = [
                path: { "${params.outdir}/snpeff" },
                mode: params.publish_dir_mode,
                pattern: "*.{csv}"
            ]
        }
    }
}


// Subworkflow: phylogeny

process {

    withName: 'SEQKIT_REPLACE' {
        ext.args            = { "-s -p '\\*' -r '-'" }
        ext.suffix          = { "fasta" }
        ext.errorStrategy   = { "retry" }
        ext.prefix          = { "vcf-to-fasta" }
        ext.when            = {  }
        publishDir          = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/vcf-to-fasta" },
            pattern: "vcf-to-fasta.fasta"
        ]
    }
    withName: 'SNPDISTS' {
        ext.args            = { "" }
        ext.errorStrategy   = { "retry" }
        ext.when            = {  }
        publishDir          = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            path: { "${params.outdir}/combined/snpdists" },
            pattern: "*.tsv"
        ]
    }
    withName: 'RAPIDNJ' {
        ext.args         = { "-t d -b 1000 -n" }
        ext.errorStrategy = { "ignore" }
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode:   "${params.publish_dir_mode}",
            saveAs: { filename -> filename.endsWith(".tre") ? "rapidnj_phylogeny.nh" : filename  },
            path:   { "${params.outdir}/combined/phylogeny/rapidnj" },
            pattern: "*"
        ]
    }
    withName: 'FASTTREE' {
        ext.args         = { "-gtr -gamma -fastest" }
        ext.errorStrategy = { "ignore" }
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.endsWith(".tre") ? "fasttree_phylogeny.nh" : filename  },
            path: { "${params.outdir}/combined/phylogeny/fasttree" },
            pattern: "*"
        ]
    }
    withName: 'IQTREE' {
        ext.args         = { "-alrt 1000 -B 1000 -m MFP -czb" }
        ext.errorStrategy = { "ignore" }
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.endsWith(".treefile") ? "iqtree_phylogeny.nh" : filename  },
            path: { "${params.outdir}/combined/phylogeny/iqtree" },
            pattern: "*"
        ]
    }
    withName: 'RAXMLNG' {
        ext.args         = { "--all --model GTR+G --bs-trees 1000" }
        ext.errorStrategy = { "ignore" }
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> if( filename.endsWith(".bestTree")) { return "raxmlng_bestTree.nh" } else if ( filename.endsWith(".support") ) { return "raxmlng_support.nh" } else { return filename }  },
            path: { "${params.outdir}/combined/phylogeny/raxmlng" },
            pattern: "*"
        ]
    }
    withName: 'QUICKSNP' {
        ext.when         = {  }
        publishDir       = [
            enabled: true,
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> if( filename.endsWith(".nwk")) { return "quicksnp_phylogeny.nwk" } else { return filename }  },
            path: { "${params.outdir}/combined/phylogeny/quicksnp" },
            pattern: "*"
        ]
    }
}

